import { useState } from "react";
import { toast } from "sonner";
import { FormValues } from "../schema";
import { useCreateVehicle } from "@/lib/api/domains/vehicles";
import { useCreateClaim, ClaimInstruction, TypeOfLoss } from "@/lib/api/domains/claims";

export function useClaimSubmission() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [newlyCreatedClaimId, setNewlyCreatedClaimId] = useState<string | null>(null);
  const [claimCreationComplete, setClaimCreationComplete] = useState(false);

  // Get the create mutations
  const createVehicle = useCreateVehicle();
  const createClaim = useCreateClaim();

  // Handle form submission - two-step process
  const onSubmit = async (data: FormValues) => {
    setIsSubmitting(true);

    try {
      // Step 1: Create the vehicle with owner information
      const vehicleData = {
        make: data.make,
        model: data.model || undefined,
        year: data.year || undefined,
        color: data.color || undefined,
        registration_number: data.registration_number || undefined,
        vin: data.vin || undefined,
        engine_number: data.engine_number || undefined,
        owner_name: data.owner_name,
        owner_contact: data.owner_contact,
        transmission_type: data.transmission_type || undefined,
        drive_type: data.drive_type || undefined,
        fuel_type: data.fuel_type || undefined,
        license_disk_expiry: data.license_disk_expiry || undefined,
        license_disk_present: data.license_disk_present || undefined,
        has_lettering: data.has_lettering || undefined,
        has_trim_mouldings: data.has_trim_mouldings || undefined,
        // Removed client_id as vehicles are associated with claims, not directly with clients
      };

      // Log the client ID being used
      console.log("Creating vehicle with data:", vehicleData);
      console.log("Using client ID:", data.client_id);

      // Create the vehicle
      const newVehicle = await createVehicle.mutateAsync(vehicleData);
      console.log("Vehicle created successfully:", newVehicle);

      // Add a small delay to ensure database consistency
      await new Promise(resolve => setTimeout(resolve, 500));

      // Combine date and time of loss
      const date = data.date_of_loss;
      const time = data.time_of_loss; // "HH:MM"
      const parts = time.split(':');
      const hours = parseInt(parts[0] || '0', 10);
      const minutes = parseInt(parts[1] || '0', 10);
      date.setHours(hours, minutes, 0, 0); // Combine date and time into the Date object

      // Step 2: Create the claim with the new vehicle ID
      const claimData: {
        client_id: string;
        vehicle_id: string;
        client_reference?: string;
        policy_number?: string;
        instruction: ClaimInstruction;
        date_of_loss: Date;
        time_of_loss?: string;
        type_of_loss?: TypeOfLoss;
        accident_description?: string;
        claims_handler_name?: string;
        claims_handler_contact?: string;
        claims_handler_email?: string;
        insured_name?: string;
        claim_location?: string;
        province_id?: string;
        assigned_employee_id?: string;
        client_special_instructions?: string;
      } = {
        client_id: data.client_id,
        vehicle_id: newVehicle.id, // Use the ID of the newly created vehicle
        client_reference: data.client_reference || undefined,
        policy_number: data.policy_number || undefined,
        instruction: data.instruction,
        date_of_loss: date, // Pass the combined Date object
        time_of_loss: data.time_of_loss,
        type_of_loss: data.type_of_loss as TypeOfLoss || undefined,
        accident_description: data.accident_description || undefined,
        claims_handler_name: data.claims_handler_name || undefined,
        claims_handler_contact: data.claims_handler_contact || undefined,
        claims_handler_email: data.claims_handler_email || undefined,
        insured_name: data.insured_name || undefined,
        claim_location: data.claim_location || undefined,
        province_id: data.province_id || undefined,
        assigned_employee_id: data.assigned_to_employee_id || undefined,
        // Note: job_number is auto-generated by a database trigger
      };

      // Use client special instructions as notes if available
      const notes = data.client_special_instructions || '';

      // Add owner information to notes if available
      if (data.owner_email || data.owner_alt_phone || data.owner_address) {
        const additionalInfo = [
          data.owner_email ? `Email: ${data.owner_email}` : '',
          data.owner_alt_phone ? `Alt Phone: ${data.owner_alt_phone}` : '',
          data.owner_address ? `Address: ${data.owner_address}` : ''
        ].filter(Boolean).join('\n');

        if (additionalInfo) {
          notes = notes
            ? `${notes}\n\nOwner Additional Info:\n${additionalInfo}`
            : `Owner Additional Info:\n${additionalInfo}`;
        }
      }

      // Add party type information to notes
      if (data.party_type) {
        notes = notes
          ? `${notes}\n\nParty Type: ${data.party_type}`
          : `Party Type: ${data.party_type}`;
      }

      // Add notes to claim data if we have any
      if (notes) {
        claimData.client_special_instructions = notes;
      }

      console.log("Creating claim with data:", claimData);

      // Try to create the claim with retry logic
      let retryCount = 0;
      let createdClaim;

      while (retryCount < 3) {
        try {
          createdClaim = await createClaim.mutateAsync(claimData);
          console.log("Claim created successfully:", createdClaim);
          break; // Success, exit the retry loop
        } catch (error) {
          console.error(`Claim creation attempt ${retryCount + 1} failed:`, error);
          retryCount++;

          if (retryCount >= 3) {
            throw error; // Re-throw after all retries fail
          }

          // Wait longer between each retry
          await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));
        }
      }

      // Store the newly created claim ID and update state
      setNewlyCreatedClaimId(createdClaim.id);
      setClaimCreationComplete(true);

      toast.success(`Claim created successfully. You can now upload attachments.`);
      // Don't redirect yet - allow user to upload attachments
    } catch (error: any) {
      console.error("Error creating claim/vehicle:", error);
      toast.error(`Error: ${error.message || 'Failed to create claim/vehicle'}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  return {
    isSubmitting,
    setIsSubmitting,
    newlyCreatedClaimId,
    claimCreationComplete,
    createVehicle,
    createClaim,
    onSubmit
  };
}
